<?php
/**
 * ChannelManagerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\ChannelManager
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Channel Manager Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\ChannelManager\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GeminiCommerce\ChannelManager\ApiException;
use GeminiCommerce\ChannelManager\Configuration;
use GeminiCommerce\ChannelManager\HeaderSelector;
use GeminiCommerce\ChannelManager\ObjectSerializer;

/**
 * ChannelManagerApi Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\ChannelManager
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChannelManagerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'channelManagerCreateAssociation' => [
            'application/json',
        ],
        'channelManagerCreateChannel' => [
            'application/json',
        ],
        'channelManagerCreateMarket' => [
            'application/json',
        ],
        'channelManagerDeleteAssociation' => [
            'application/json',
        ],
        'channelManagerDeleteChannel' => [
            'application/json',
        ],
        'channelManagerDeleteMarket' => [
            'application/json',
        ],
        'channelManagerGetChannel' => [
            'application/json',
        ],
        'channelManagerGetChannelWithAssociations' => [
            'application/json',
        ],
        'channelManagerGetMarket' => [
            'application/json',
        ],
        'channelManagerGetMarketWithAssociations' => [
            'application/json',
        ],
        'channelManagerListChannels' => [
            'application/json',
        ],
        'channelManagerListChannelsWithAssociations' => [
            'application/json',
        ],
        'channelManagerListMarkets' => [
            'application/json',
        ],
        'channelManagerListMarketsWithAssociations' => [
            'application/json',
        ],
        'channelManagerUpdateChannel' => [
            'application/json',
        ],
        'channelManagerUpdateMarket' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation channelManagerCreateAssociation
     *
     * CreateAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateAssociationRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateAssociation'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerCreateAssociation($body, string $contentType = self::contentTypes['channelManagerCreateAssociation'][0])
    {
        list($response) = $this->channelManagerCreateAssociationWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerCreateAssociationWithHttpInfo
     *
     * CreateAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateAssociation'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerCreateAssociationWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerCreateAssociation'][0])
    {
        $request = $this->channelManagerCreateAssociationRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerCreateAssociationAsync
     *
     * CreateAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerCreateAssociationAsync($body, string $contentType = self::contentTypes['channelManagerCreateAssociation'][0])
    {
        return $this->channelManagerCreateAssociationAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerCreateAssociationAsyncWithHttpInfo
     *
     * CreateAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerCreateAssociationAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerCreateAssociation'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerAssociationResponse';
        $request = $this->channelManagerCreateAssociationRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerCreateAssociation'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerCreateAssociationRequest($body, string $contentType = self::contentTypes['channelManagerCreateAssociation'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerCreateAssociation'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/CreateAssociation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerCreateChannel
     *
     * CreateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateChannelRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerCreateChannel($body, string $contentType = self::contentTypes['channelManagerCreateChannel'][0])
    {
        list($response) = $this->channelManagerCreateChannelWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerCreateChannelWithHttpInfo
     *
     * CreateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerCreateChannelWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerCreateChannel'][0])
    {
        $request = $this->channelManagerCreateChannelRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerCreateChannelAsync
     *
     * CreateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerCreateChannelAsync($body, string $contentType = self::contentTypes['channelManagerCreateChannel'][0])
    {
        return $this->channelManagerCreateChannelAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerCreateChannelAsyncWithHttpInfo
     *
     * CreateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerCreateChannelAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerCreateChannel'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse';
        $request = $this->channelManagerCreateChannelRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerCreateChannel'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerCreateChannelRequest($body, string $contentType = self::contentTypes['channelManagerCreateChannel'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerCreateChannel'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/CreateChannel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerCreateMarket
     *
     * CreateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateMarketRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerCreateMarket($body, string $contentType = self::contentTypes['channelManagerCreateMarket'][0])
    {
        list($response) = $this->channelManagerCreateMarketWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerCreateMarketWithHttpInfo
     *
     * CreateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerCreateMarketWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerCreateMarket'][0])
    {
        $request = $this->channelManagerCreateMarketRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerCreateMarketAsync
     *
     * CreateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerCreateMarketAsync($body, string $contentType = self::contentTypes['channelManagerCreateMarket'][0])
    {
        return $this->channelManagerCreateMarketAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerCreateMarketAsyncWithHttpInfo
     *
     * CreateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerCreateMarketAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerCreateMarket'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse';
        $request = $this->channelManagerCreateMarketRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerCreateMarket'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerCreateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerCreateMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerCreateMarketRequest($body, string $contentType = self::contentTypes['channelManagerCreateMarket'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerCreateMarket'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/CreateMarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerDeleteAssociation
     *
     * DeleteAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteAssociationRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteAssociation'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerDeleteAssociation($body, string $contentType = self::contentTypes['channelManagerDeleteAssociation'][0])
    {
        list($response) = $this->channelManagerDeleteAssociationWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerDeleteAssociationWithHttpInfo
     *
     * DeleteAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteAssociation'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerDeleteAssociationWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerDeleteAssociation'][0])
    {
        $request = $this->channelManagerDeleteAssociationRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerDeleteAssociationAsync
     *
     * DeleteAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerDeleteAssociationAsync($body, string $contentType = self::contentTypes['channelManagerDeleteAssociation'][0])
    {
        return $this->channelManagerDeleteAssociationAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerDeleteAssociationAsyncWithHttpInfo
     *
     * DeleteAssociation
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerDeleteAssociationAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerDeleteAssociation'][0])
    {
        $returnType = 'object';
        $request = $this->channelManagerDeleteAssociationRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerDeleteAssociation'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteAssociationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerDeleteAssociationRequest($body, string $contentType = self::contentTypes['channelManagerDeleteAssociation'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerDeleteAssociation'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/DeleteAssociation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerDeleteChannel
     *
     * DeleteChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteChannelRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerDeleteChannel($body, string $contentType = self::contentTypes['channelManagerDeleteChannel'][0])
    {
        list($response) = $this->channelManagerDeleteChannelWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerDeleteChannelWithHttpInfo
     *
     * DeleteChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerDeleteChannelWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerDeleteChannel'][0])
    {
        $request = $this->channelManagerDeleteChannelRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerDeleteChannelAsync
     *
     * DeleteChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerDeleteChannelAsync($body, string $contentType = self::contentTypes['channelManagerDeleteChannel'][0])
    {
        return $this->channelManagerDeleteChannelAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerDeleteChannelAsyncWithHttpInfo
     *
     * DeleteChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerDeleteChannelAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerDeleteChannel'][0])
    {
        $returnType = 'object';
        $request = $this->channelManagerDeleteChannelRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerDeleteChannel'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerDeleteChannelRequest($body, string $contentType = self::contentTypes['channelManagerDeleteChannel'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerDeleteChannel'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/DeleteChannel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerDeleteMarket
     *
     * DeleteMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteMarketRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerDeleteMarket($body, string $contentType = self::contentTypes['channelManagerDeleteMarket'][0])
    {
        list($response) = $this->channelManagerDeleteMarketWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerDeleteMarketWithHttpInfo
     *
     * DeleteMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerDeleteMarketWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerDeleteMarket'][0])
    {
        $request = $this->channelManagerDeleteMarketRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerDeleteMarketAsync
     *
     * DeleteMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerDeleteMarketAsync($body, string $contentType = self::contentTypes['channelManagerDeleteMarket'][0])
    {
        return $this->channelManagerDeleteMarketAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerDeleteMarketAsyncWithHttpInfo
     *
     * DeleteMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerDeleteMarketAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerDeleteMarket'][0])
    {
        $returnType = 'object';
        $request = $this->channelManagerDeleteMarketRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerDeleteMarket'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerDeleteMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerDeleteMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerDeleteMarketRequest($body, string $contentType = self::contentTypes['channelManagerDeleteMarket'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerDeleteMarket'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/DeleteMarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerGetChannel
     *
     * GetChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerGetChannel($body, string $contentType = self::contentTypes['channelManagerGetChannel'][0])
    {
        list($response) = $this->channelManagerGetChannelWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerGetChannelWithHttpInfo
     *
     * GetChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerGetChannelWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetChannel'][0])
    {
        $request = $this->channelManagerGetChannelRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerGetChannelAsync
     *
     * GetChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetChannelAsync($body, string $contentType = self::contentTypes['channelManagerGetChannel'][0])
    {
        return $this->channelManagerGetChannelAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerGetChannelAsyncWithHttpInfo
     *
     * GetChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetChannelAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetChannel'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse';
        $request = $this->channelManagerGetChannelRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerGetChannel'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerGetChannelRequest($body, string $contentType = self::contentTypes['channelManagerGetChannel'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerGetChannel'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/GetChannel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerGetChannelWithAssociations
     *
     * GetChannelWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelWithAssociationsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannelWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerGetChannelWithAssociations($body, string $contentType = self::contentTypes['channelManagerGetChannelWithAssociations'][0])
    {
        list($response) = $this->channelManagerGetChannelWithAssociationsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerGetChannelWithAssociationsWithHttpInfo
     *
     * GetChannelWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannelWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerGetChannelWithAssociationsWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetChannelWithAssociations'][0])
    {
        $request = $this->channelManagerGetChannelWithAssociationsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerGetChannelWithAssociationsAsync
     *
     * GetChannelWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannelWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetChannelWithAssociationsAsync($body, string $contentType = self::contentTypes['channelManagerGetChannelWithAssociations'][0])
    {
        return $this->channelManagerGetChannelWithAssociationsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerGetChannelWithAssociationsAsyncWithHttpInfo
     *
     * GetChannelWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannelWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetChannelWithAssociationsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetChannelWithAssociations'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponseWithAssociations';
        $request = $this->channelManagerGetChannelWithAssociationsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerGetChannelWithAssociations'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetChannelWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetChannelWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerGetChannelWithAssociationsRequest($body, string $contentType = self::contentTypes['channelManagerGetChannelWithAssociations'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerGetChannelWithAssociations'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/GetChannelWithAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerGetMarket
     *
     * GetMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerGetMarket($body, string $contentType = self::contentTypes['channelManagerGetMarket'][0])
    {
        list($response) = $this->channelManagerGetMarketWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerGetMarketWithHttpInfo
     *
     * GetMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerGetMarketWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetMarket'][0])
    {
        $request = $this->channelManagerGetMarketRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerGetMarketAsync
     *
     * GetMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetMarketAsync($body, string $contentType = self::contentTypes['channelManagerGetMarket'][0])
    {
        return $this->channelManagerGetMarketAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerGetMarketAsyncWithHttpInfo
     *
     * GetMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetMarketAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetMarket'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse';
        $request = $this->channelManagerGetMarketRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerGetMarket'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerGetMarketRequest($body, string $contentType = self::contentTypes['channelManagerGetMarket'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerGetMarket'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/GetMarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerGetMarketWithAssociations
     *
     * GetMarketWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketWithAssociationsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarketWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerGetMarketWithAssociations($body, string $contentType = self::contentTypes['channelManagerGetMarketWithAssociations'][0])
    {
        list($response) = $this->channelManagerGetMarketWithAssociationsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerGetMarketWithAssociationsWithHttpInfo
     *
     * GetMarketWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarketWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerGetMarketWithAssociationsWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetMarketWithAssociations'][0])
    {
        $request = $this->channelManagerGetMarketWithAssociationsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerGetMarketWithAssociationsAsync
     *
     * GetMarketWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarketWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetMarketWithAssociationsAsync($body, string $contentType = self::contentTypes['channelManagerGetMarketWithAssociations'][0])
    {
        return $this->channelManagerGetMarketWithAssociationsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerGetMarketWithAssociationsAsyncWithHttpInfo
     *
     * GetMarketWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarketWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerGetMarketWithAssociationsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerGetMarketWithAssociations'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponseWithAssociations';
        $request = $this->channelManagerGetMarketWithAssociationsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerGetMarketWithAssociations'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerGetMarketWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerGetMarketWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerGetMarketWithAssociationsRequest($body, string $contentType = self::contentTypes['channelManagerGetMarketWithAssociations'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerGetMarketWithAssociations'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/GetMarketWithAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerListChannels
     *
     * ListChannels
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannels'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerListChannels($body, string $contentType = self::contentTypes['channelManagerListChannels'][0])
    {
        list($response) = $this->channelManagerListChannelsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerListChannelsWithHttpInfo
     *
     * ListChannels
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannels'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerListChannelsWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListChannels'][0])
    {
        $request = $this->channelManagerListChannelsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerListChannelsAsync
     *
     * ListChannels
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListChannelsAsync($body, string $contentType = self::contentTypes['channelManagerListChannels'][0])
    {
        return $this->channelManagerListChannelsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerListChannelsAsyncWithHttpInfo
     *
     * ListChannels
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListChannelsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListChannels'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsResponse';
        $request = $this->channelManagerListChannelsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerListChannels'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerListChannelsRequest($body, string $contentType = self::contentTypes['channelManagerListChannels'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerListChannels'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/ListChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerListChannelsWithAssociations
     *
     * ListChannelsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannelsWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerListChannelsWithAssociations($body, string $contentType = self::contentTypes['channelManagerListChannelsWithAssociations'][0])
    {
        list($response) = $this->channelManagerListChannelsWithAssociationsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerListChannelsWithAssociationsWithHttpInfo
     *
     * ListChannelsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannelsWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerListChannelsWithAssociationsWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListChannelsWithAssociations'][0])
    {
        $request = $this->channelManagerListChannelsWithAssociationsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerListChannelsWithAssociationsAsync
     *
     * ListChannelsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannelsWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListChannelsWithAssociationsAsync($body, string $contentType = self::contentTypes['channelManagerListChannelsWithAssociations'][0])
    {
        return $this->channelManagerListChannelsWithAssociationsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerListChannelsWithAssociationsAsyncWithHttpInfo
     *
     * ListChannelsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannelsWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListChannelsWithAssociationsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListChannelsWithAssociations'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsResponse';
        $request = $this->channelManagerListChannelsWithAssociationsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerListChannelsWithAssociations'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListChannelsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListChannelsWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerListChannelsWithAssociationsRequest($body, string $contentType = self::contentTypes['channelManagerListChannelsWithAssociations'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerListChannelsWithAssociations'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/ListChannelsWithAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerListMarkets
     *
     * ListMarkets
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarkets'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerListMarkets($body, string $contentType = self::contentTypes['channelManagerListMarkets'][0])
    {
        list($response) = $this->channelManagerListMarketsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerListMarketsWithHttpInfo
     *
     * ListMarkets
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarkets'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerListMarketsWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListMarkets'][0])
    {
        $request = $this->channelManagerListMarketsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerListMarketsAsync
     *
     * ListMarkets
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarkets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListMarketsAsync($body, string $contentType = self::contentTypes['channelManagerListMarkets'][0])
    {
        return $this->channelManagerListMarketsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerListMarketsAsyncWithHttpInfo
     *
     * ListMarkets
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarkets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListMarketsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListMarkets'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsResponse';
        $request = $this->channelManagerListMarketsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerListMarkets'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarkets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerListMarketsRequest($body, string $contentType = self::contentTypes['channelManagerListMarkets'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerListMarkets'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/ListMarkets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerListMarketsWithAssociations
     *
     * ListMarketsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarketsWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerListMarketsWithAssociations($body, string $contentType = self::contentTypes['channelManagerListMarketsWithAssociations'][0])
    {
        list($response) = $this->channelManagerListMarketsWithAssociationsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerListMarketsWithAssociationsWithHttpInfo
     *
     * ListMarketsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarketsWithAssociations'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerListMarketsWithAssociationsWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListMarketsWithAssociations'][0])
    {
        $request = $this->channelManagerListMarketsWithAssociationsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerListMarketsWithAssociationsAsync
     *
     * ListMarketsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarketsWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListMarketsWithAssociationsAsync($body, string $contentType = self::contentTypes['channelManagerListMarketsWithAssociations'][0])
    {
        return $this->channelManagerListMarketsWithAssociationsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerListMarketsWithAssociationsAsyncWithHttpInfo
     *
     * ListMarketsWithAssociations
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarketsWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerListMarketsWithAssociationsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerListMarketsWithAssociations'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsResponse';
        $request = $this->channelManagerListMarketsWithAssociationsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerListMarketsWithAssociations'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerListMarketsWithAssociationsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerListMarketsWithAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerListMarketsWithAssociationsRequest($body, string $contentType = self::contentTypes['channelManagerListMarketsWithAssociations'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerListMarketsWithAssociations'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/ListMarketsWithAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerUpdateChannel
     *
     * UpdateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateChannelRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerUpdateChannel($body, string $contentType = self::contentTypes['channelManagerUpdateChannel'][0])
    {
        list($response) = $this->channelManagerUpdateChannelWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerUpdateChannelWithHttpInfo
     *
     * UpdateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateChannel'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerUpdateChannelWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerUpdateChannel'][0])
    {
        $request = $this->channelManagerUpdateChannelRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerUpdateChannelAsync
     *
     * UpdateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerUpdateChannelAsync($body, string $contentType = self::contentTypes['channelManagerUpdateChannel'][0])
    {
        return $this->channelManagerUpdateChannelAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerUpdateChannelAsyncWithHttpInfo
     *
     * UpdateChannel
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerUpdateChannelAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerUpdateChannel'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerChannelResponse';
        $request = $this->channelManagerUpdateChannelRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerUpdateChannel'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateChannelRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateChannel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerUpdateChannelRequest($body, string $contentType = self::contentTypes['channelManagerUpdateChannel'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerUpdateChannel'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/UpdateChannel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelManagerUpdateMarket
     *
     * UpdateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateMarketRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus
     */
    public function channelManagerUpdateMarket($body, string $contentType = self::contentTypes['channelManagerUpdateMarket'][0])
    {
        list($response) = $this->channelManagerUpdateMarketWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation channelManagerUpdateMarketWithHttpInfo
     *
     * UpdateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateMarket'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ChannelManager\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse|\GeminiCommerce\ChannelManager\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelManagerUpdateMarketWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerUpdateMarket'][0])
    {
        $request = $this->channelManagerUpdateMarketRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ChannelManager\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ChannelManager\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ChannelManager\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelManagerUpdateMarketAsync
     *
     * UpdateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerUpdateMarketAsync($body, string $contentType = self::contentTypes['channelManagerUpdateMarket'][0])
    {
        return $this->channelManagerUpdateMarketAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelManagerUpdateMarketAsyncWithHttpInfo
     *
     * UpdateMarket
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelManagerUpdateMarketAsyncWithHttpInfo($body, string $contentType = self::contentTypes['channelManagerUpdateMarket'][0])
    {
        $returnType = '\GeminiCommerce\ChannelManager\Model\ChannelmanagerMarketResponse';
        $request = $this->channelManagerUpdateMarketRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelManagerUpdateMarket'
     *
     * @param  \GeminiCommerce\ChannelManager\Model\ChannelmanagerUpdateMarketRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['channelManagerUpdateMarket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelManagerUpdateMarketRequest($body, string $contentType = self::contentTypes['channelManagerUpdateMarket'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling channelManagerUpdateMarket'
            );
        }


        $resourcePath = '/channelmanager.ChannelManager/UpdateMarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
